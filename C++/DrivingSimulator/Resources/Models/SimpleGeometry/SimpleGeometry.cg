struct VPOut
{
	float4 clipPosition:POSITION;
	float2 uv:TEXCOORD0;
	float4 position:TEXCOORD1;
	float3 normal:TEXCOORD2;
};

VPOut mainVP(float4 position:POSITION, float3 normal:NORMAL, float2 uv:TEXCOORD0, uniform float4x4 worldViewProj)
{
	VPOut res;

	// calculate clip position
	res.clipPosition = mul(worldViewProj, position);
	
	// copy values needed for fragment program
	res.uv = uv;
	res.position = position;
	res.normal = normal;
	
	return res;
}

struct FPOut
{
	float4 color:COLOR;
};

FPOut mainFP(float2 uv:TEXCOORD0, float4 position:TEXCOORD1, float3 normal:TEXCOORD2, uniform sampler2D texture, uniform float4 ambientLight, uniform float4 diffuseLight, uniform float4 specularLight, uniform float specularExponent, uniform float4 lightPosition, uniform float3 cameraPosition)
{
	FPOut res;
	
	// calculate some vectors
	float3 cameraDirection = normalize(cameraPosition - position.xyz);
	float3 lightDirection = normalize(lightPosition.xyz - (position * lightPosition.w).xyz);
	float3 halfAngle = normalize(lightDirection + cameraDirection);
	
	// calculate cross products
	float nDotL = dot(lightDirection, normal);
	float nDotH = dot(halfAngle, normal);
	float4 litColor = lit(nDotL, nDotH, specularExponent);
	
	// get color from texture
	float3 textureColor = tex2D(texture, uv).rgb;
	
	// add lighted colors
	res.color = (ambientLight + diffuseLight * litColor.y) * float4(textureColor, 1) + specularLight * litColor.z;
		
	return res;
}

