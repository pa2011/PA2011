struct VPOut
{
	float4 clipPosition:POSITION;
	float2 uv:TEXCOORD0;
	float3 normal:TEXCOORD1;
	float3 lightDirection0:TEXCOORD2;
	float3 halfAngle0:TEXCOORD3;
	float3 lightDirection1:TEXCOORD4;
	float3 halfAngle1:TEXCOORD5;
	float3 lightDirection2:TEXCOORD6;
	float3 halfAngle2:TEXCOORD7;
};

VPOut mainVP(float4 position:POSITION, float3 normal:NORMAL, float2 uv:TEXCOORD0, uniform float4x4 worldViewProj, uniform float3 cameraPosition, uniform float4 lightPosition0, uniform float4 lightPosition1, uniform float4 lightPosition2)
{
	VPOut res;

	// calculate clip position
	res.clipPosition = mul(worldViewProj, position);
	
	// copy values needed for fragment program
	res.uv = uv;
	res.normal = normal;
	
	// calculate some vectors
	float3 cameraDirection = normalize(cameraPosition - position.xyz);
	
	res.lightDirection0 = normalize(lightPosition0.xyz - (position * lightPosition0.w).xyz);
	res.halfAngle0 = normalize(res.lightDirection0 + cameraDirection);
	res.lightDirection1	= normalize(lightPosition1.xyz - (position * lightPosition1.w).xyz);
	res.halfAngle1 = normalize(res.lightDirection1 + cameraDirection);
	res.lightDirection2 = normalize(lightPosition2.xyz - (position * lightPosition2.w).xyz);
	res.halfAngle2 = normalize(res.lightDirection2 + cameraDirection);
			
	return res;
}

struct FPOut
{
	float4 color:COLOR;
};

FPOut mainFP(float2 uv:TEXCOORD0, float3 normal:TEXCOORD1, float3 lightDirection0:TEXCOORD2, float3 halfAngle0:TEXCOORD3, float3 lightDirection1:TEXCOORD4, float3 halfAngle1:TEXCOORD5, float3 lightDirection2:TEXCOORD6, float3 halfAngle2:TEXCOORD7, uniform sampler2D texture, uniform float4 ambientLight, uniform float4 diffuseLight0, uniform float4 specularLight0, uniform float4 diffuseLight1, uniform float4 specularLight1, uniform float4 diffuseLight2, uniform float4 specularLight2, uniform float specularExponent)
{
	FPOut res;
	
	// calculate dot products
	float nDotL0 = dot(normalize(lightDirection0), normal);
	float nDotH0 = dot(normalize(halfAngle0), normal);
	float nDotL1 = dot(normalize(lightDirection1), normal);
	float nDotH1 = dot(normalize(halfAngle1), normal);
	float nDotL2 = dot(normalize(lightDirection2), normal);
	float nDotH2 = dot(normalize(halfAngle2), normal);
	
	// get color from texture
	float3 textureColor = tex2D(texture, uv).rgb;
	
	// calculate light intensity
	float4 lightIntensity0 = lit(nDotL0, nDotH0, specularExponent);
	float4 lightIntensity1 = lit(nDotL1, nDotH1, specularExponent);
	float4 lightIntensity2 = lit(nDotL2, nDotH2, specularExponent);
	
	// add light coefficients
	float4 diffuseLight = diffuseLight0 * lightIntensity0.y + diffuseLight1 * lightIntensity1.y + diffuseLight2 * lightIntensity2.y;
	float4 specularLight = specularLight0 * lightIntensity0.z + specularLight1 * lightIntensity1.z + specularLight2 * lightIntensity2.z;
		
	// add colors
	res.color = (ambientLight + diffuseLight) * float4(textureColor, 1) + specularLight;
	
	return res;
}

